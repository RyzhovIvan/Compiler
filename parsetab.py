
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALleftORleftANDleftNOTleftPLUSMINUSleftDIVMULAND BREAK CLOSE CLOSE_CONSTR COLON COMA COMMENT CONTINUE DIVMUL ELSE EQUAL FLOAT FLOAT_NUM FUNK ID IF INPUT INT MARK NOT NUM OPEN OPEN_CONSTR OR PLUSMINUS PRINT RELOP RETURN STR STRING THEN VAR WHILE\n    program : declarations optional_statements\n             identifier_list : ID\n                       | identifier_list COMA ID declarations : declarations VAR type identifier_list COLON\n                    | emptytype : INT\n            | FLOAT\n            | STRoptional_statements : statement_list\n                           | emptystatement_list : statement\n                      | statement_list statementstatement : IF OPEN expression CLOSE THEN compound_statement\n                 | WHILE OPEN expression CLOSE compound_statement\n                 | subprogram_declarations\n                 | expression\n                 | out\n                 subprogram_declarations : subprogram_declaration\n                               | subprogram_declarations subprogram_declarationsubprogram_declaration : subprogram_head declarations compound_statementsubprogram_head : FUNK ID arguments arguments : OPEN parameter_list CLOSEparameter_list : type identifier_list\n                      | parameter_list COLON type identifier_listcompound_statement : OPEN_CONSTR optional_statements CLOSE_CONSTRexpression_list : expression\n                       | expression_list COMA expressionexpression : NOT simple_expression\n                  | RETURN simple_expression\n                  | expression AND simple_expression\n                  | expression OR simple_expression\n                  | simple_expression RELOP simple_expression\n                  | simple_expressionsimple_expression : term\n                         | eqstate\n                         eqstate : factor EQUAL term\n               | factorterm : dvml\n            | term PLUSMINUS dvmldvml : factor\n            | dvml DIVMUL factorout : PRINT OPEN factor CLOSE COLON in : INPUT OPEN CLOSE COLONfactor : ID\n              | ID OPEN expression_list CLOSE\n              | NUM\n              | CONTINUE\n              | BREAK\n              | FLOAT_NUM\n              | OPEN expression CLOSE\n              | type factor\n              | NOT factor\n              | MARK STRING MARK\n              | factor COLON\n              empty :'
    
_lr_action_items = {'VAR':([0,2,3,22,53,74,80,95,],[-55,5,-5,-55,5,-21,-4,-22,]),'IF':([0,2,3,7,9,12,14,15,16,18,21,23,24,26,27,28,29,30,31,37,39,45,46,47,49,52,61,63,64,65,67,69,70,71,72,73,78,79,80,88,92,93,94,99,],[-55,10,-5,10,-11,-16,-15,-17,-18,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-12,-19,-28,-37,-29,-54,-52,-50,-30,-31,-32,-40,-36,-20,10,-39,-41,-53,-4,-45,-14,-42,-25,-13,]),'WHILE':([0,2,3,7,9,12,14,15,16,18,21,23,24,26,27,28,29,30,31,37,39,45,46,47,49,52,61,63,64,65,67,69,70,71,72,73,78,79,80,88,92,93,94,99,],[-55,13,-5,13,-11,-16,-15,-17,-18,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-12,-19,-28,-37,-29,-54,-52,-50,-30,-31,-32,-40,-36,-20,13,-39,-41,-53,-4,-45,-14,-42,-25,-13,]),'NOT':([0,2,3,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,78,79,80,88,89,92,93,94,99,],[-55,17,-5,38,17,-11,17,-16,-15,-17,-18,38,-33,38,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,38,-12,17,38,38,17,-19,-28,-37,38,-29,38,38,-54,38,17,38,-52,-50,-30,-31,-32,-40,-36,-20,17,-39,-41,-53,-4,-45,17,-14,-42,-25,-13,]),'RETURN':([0,2,3,7,9,11,12,14,15,16,18,21,23,24,26,27,28,29,30,31,37,39,40,44,45,46,47,49,52,56,61,63,64,65,67,69,70,71,72,73,78,79,80,88,89,92,93,94,99,],[-55,19,-5,19,-11,19,-16,-15,-17,-18,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-12,19,19,-19,-28,-37,-29,-54,19,-52,-50,-30,-31,-32,-40,-36,-20,19,-39,-41,-53,-4,-45,19,-14,-42,-25,-13,]),'PRINT':([0,2,3,7,9,12,14,15,16,18,21,23,24,26,27,28,29,30,31,37,39,45,46,47,49,52,61,63,64,65,67,69,70,71,72,73,78,79,80,88,92,93,94,99,],[-55,20,-5,20,-11,-16,-15,-17,-18,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-12,-19,-28,-37,-29,-54,-52,-50,-30,-31,-32,-40,-36,-20,20,-39,-41,-53,-4,-45,-14,-42,-25,-13,]),'FUNK':([0,2,3,7,9,12,14,15,16,18,21,23,24,26,27,28,29,30,31,37,39,45,46,47,49,52,61,63,64,65,67,69,70,71,72,73,78,79,80,88,92,93,94,99,],[-55,25,-5,25,-11,-16,25,-17,-18,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-12,-19,-28,-37,-29,-54,-52,-50,-30,-31,-32,-40,-36,-20,25,-39,-41,-53,-4,-45,-14,-42,-25,-13,]),'ID':([0,2,3,6,7,9,11,12,14,15,16,17,18,19,21,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,78,79,80,81,87,88,89,92,93,94,99,100,],[-55,26,-5,26,26,-11,26,-16,-15,-17,-18,26,-33,26,-37,-34,-35,55,-44,-38,-46,-47,-48,-49,-6,-7,-8,60,-51,26,-12,26,26,26,26,-19,-28,-37,26,-29,26,26,-54,26,26,26,-52,-50,-30,-31,-32,-40,-36,-20,26,-39,-41,-53,-4,90,60,-45,26,-14,-42,-25,-13,60,]),'NUM':([0,2,3,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,78,79,80,88,89,92,93,94,99,],[-55,28,-5,28,28,-11,28,-16,-15,-17,-18,28,-33,28,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,28,-12,28,28,28,28,-19,-28,-37,28,-29,28,28,-54,28,28,28,-52,-50,-30,-31,-32,-40,-36,-20,28,-39,-41,-53,-4,-45,28,-14,-42,-25,-13,]),'CONTINUE':([0,2,3,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,78,79,80,88,89,92,93,94,99,],[-55,29,-5,29,29,-11,29,-16,-15,-17,-18,29,-33,29,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,29,-12,29,29,29,29,-19,-28,-37,29,-29,29,29,-54,29,29,29,-52,-50,-30,-31,-32,-40,-36,-20,29,-39,-41,-53,-4,-45,29,-14,-42,-25,-13,]),'BREAK':([0,2,3,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,78,79,80,88,89,92,93,94,99,],[-55,30,-5,30,30,-11,30,-16,-15,-17,-18,30,-33,30,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,30,-12,30,30,30,30,-19,-28,-37,30,-29,30,30,-54,30,30,30,-52,-50,-30,-31,-32,-40,-36,-20,30,-39,-41,-53,-4,-45,30,-14,-42,-25,-13,]),'FLOAT_NUM':([0,2,3,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,78,79,80,88,89,92,93,94,99,],[-55,31,-5,31,31,-11,31,-16,-15,-17,-18,31,-33,31,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,31,-12,31,31,31,31,-19,-28,-37,31,-29,31,31,-54,31,31,31,-52,-50,-30,-31,-32,-40,-36,-20,31,-39,-41,-53,-4,-45,31,-14,-42,-25,-13,]),'OPEN':([0,2,3,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,61,63,64,65,67,69,70,71,72,73,78,79,80,88,89,92,93,94,99,],[-55,11,-5,11,11,-11,40,11,-16,44,-15,-17,-18,11,-33,11,50,-37,-34,-35,56,-38,-46,-47,-48,-49,-6,-7,-8,-51,11,-12,11,11,11,11,-19,-28,-37,11,-29,11,11,-54,11,75,11,11,-52,-50,-30,-31,-32,-40,-36,-20,11,-39,-41,-53,-4,-45,11,-14,-42,-25,-13,]),'MARK':([0,2,3,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,58,61,63,64,65,67,69,70,71,72,73,78,79,80,88,89,92,93,94,99,],[-55,32,-5,32,32,-11,32,-16,-15,-17,-18,32,-33,32,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,32,-12,32,32,32,32,-19,-28,-37,32,-29,32,32,-54,32,32,32,79,-52,-50,-30,-31,-32,-40,-36,-20,32,-39,-41,-53,-4,-45,32,-14,-42,-25,-13,]),'INT':([0,2,3,5,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,75,78,79,80,88,89,92,93,94,96,99,],[-55,33,-5,33,33,33,-11,33,-16,-15,-17,-18,33,-33,33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,33,-12,33,33,33,33,-19,-28,-37,33,-29,33,33,-54,33,33,33,-52,-50,-30,-31,-32,-40,-36,-20,33,-39,33,-41,-53,-4,-45,33,-14,-42,-25,33,-13,]),'FLOAT':([0,2,3,5,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,75,78,79,80,88,89,92,93,94,96,99,],[-55,34,-5,34,34,34,-11,34,-16,-15,-17,-18,34,-33,34,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,34,-12,34,34,34,34,-19,-28,-37,34,-29,34,34,-54,34,34,34,-52,-50,-30,-31,-32,-40,-36,-20,34,-39,34,-41,-53,-4,-45,34,-14,-42,-25,34,-13,]),'STR':([0,2,3,5,6,7,9,11,12,14,15,16,17,18,19,21,23,24,26,27,28,29,30,31,33,34,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,54,56,57,61,63,64,65,67,69,70,71,72,73,75,78,79,80,88,89,92,93,94,96,99,],[-55,35,-5,35,35,35,-11,35,-16,-15,-17,-18,35,-33,35,-37,-34,-35,-44,-38,-46,-47,-48,-49,-6,-7,-8,-51,35,-12,35,35,35,35,-19,-28,-37,35,-29,35,35,-54,35,35,35,-52,-50,-30,-31,-32,-40,-36,-20,35,-39,35,-41,-53,-4,-45,35,-14,-42,-25,35,-13,]),'$end':([0,1,2,3,4,7,8,9,12,14,15,16,18,21,23,24,26,27,28,29,30,31,37,39,45,46,47,49,52,61,63,64,65,67,69,70,71,73,78,79,80,88,92,93,94,99,],[-55,0,-55,-5,-1,-9,-10,-11,-16,-15,-17,-18,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-12,-19,-28,-37,-29,-54,-52,-50,-30,-31,-32,-40,-36,-20,-39,-41,-53,-4,-45,-14,-42,-25,-13,]),'OPEN_CONSTR':([3,22,53,74,80,83,91,95,],[-5,-55,72,-21,-4,72,72,-22,]),'CLOSE_CONSTR':([7,8,9,12,14,15,16,18,21,23,24,26,27,28,29,30,31,37,39,45,46,47,49,52,61,63,64,65,67,69,70,71,72,73,78,79,85,88,92,93,94,99,],[-9,-10,-11,-16,-15,-17,-18,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-12,-19,-28,-37,-29,-54,-52,-50,-30,-31,-32,-40,-36,-20,-55,-39,-41,-53,94,-45,-14,-42,-25,-13,]),'AND':([12,18,21,23,24,26,27,28,29,30,31,37,41,46,47,49,52,61,62,63,64,65,66,67,69,70,73,77,78,79,88,98,],[42,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,42,-28,-37,-29,-54,-52,42,-50,-30,-31,42,-32,-40,-36,-39,42,-41,-53,-45,42,]),'OR':([12,18,21,23,24,26,27,28,29,30,31,37,41,46,47,49,52,61,62,63,64,65,66,67,69,70,73,77,78,79,88,98,],[43,-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,43,-28,-37,-29,-54,-52,43,-50,-30,-31,43,-32,-40,-36,-39,43,-41,-53,-45,43,]),'RELOP':([18,21,23,24,26,27,28,29,30,31,37,47,52,61,63,69,70,73,78,79,88,],[48,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-52,-54,-52,-50,-40,-36,-39,-41,-53,-45,]),'CLOSE':([18,21,23,24,26,27,28,29,30,31,37,41,46,47,49,52,60,61,62,63,64,65,66,67,68,69,70,73,76,77,78,79,86,88,90,97,98,101,],[-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,63,-28,-37,-29,-54,-2,-52,82,-50,-30,-31,83,-32,84,-40,-36,-39,88,-26,-41,-53,95,-45,-3,-23,-27,-24,]),'COMA':([18,21,23,24,26,27,28,29,30,31,37,46,47,49,52,59,60,61,63,64,65,67,69,70,73,76,77,78,79,88,90,97,98,101,],[-33,-37,-34,-35,-44,-38,-46,-47,-48,-49,-51,-28,-37,-29,-54,81,-2,-52,-50,-30,-31,-32,-40,-36,-39,89,-26,-41,-53,-45,-3,81,-27,81,]),'EQUAL':([21,26,28,29,30,31,37,47,52,61,63,79,88,],[51,-44,-46,-47,-48,-49,-51,-52,-54,-52,-50,-53,-45,]),'DIVMUL':([21,26,27,28,29,30,31,37,47,52,61,63,69,73,78,79,88,],[-40,-44,57,-46,-47,-48,-49,-51,-40,-54,-52,-50,-40,57,-41,-53,-45,]),'PLUSMINUS':([21,23,26,27,28,29,30,31,37,47,52,61,63,69,70,73,78,79,88,],[-40,54,-44,-38,-46,-47,-48,-49,-51,-40,-54,-52,-50,-40,54,-39,-41,-53,-45,]),'COLON':([21,26,28,29,30,31,37,47,52,59,60,61,63,68,69,78,79,84,86,88,90,97,101,],[52,-44,-46,-47,-48,-49,52,-52,-54,80,-2,-52,-50,52,52,52,-53,93,96,-45,-3,-23,-24,]),'STRING':([32,],[58,]),'THEN':([82,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,22,],[2,53,]),'empty':([0,2,22,72,],[3,8,3,8,]),'optional_statements':([2,72,],[4,85,]),'type':([2,5,6,7,11,17,19,38,40,42,43,44,48,50,51,54,56,57,72,75,89,96,],[6,36,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,87,6,100,]),'statement_list':([2,72,],[7,7,]),'statement':([2,7,72,],[9,39,9,]),'expression':([2,7,11,40,44,56,72,89,],[12,12,41,62,66,77,12,98,]),'subprogram_declarations':([2,7,72,],[14,14,14,]),'out':([2,7,72,],[15,15,15,]),'subprogram_declaration':([2,7,14,72,],[16,16,45,16,]),'simple_expression':([2,7,11,17,19,40,42,43,44,48,56,72,89,],[18,18,18,46,49,18,64,65,18,67,18,18,18,]),'factor':([2,6,7,11,17,19,38,40,42,43,44,48,50,51,54,56,57,72,89,],[21,37,21,21,47,21,61,21,21,21,21,21,68,69,69,21,78,21,21,]),'subprogram_head':([2,7,14,72,],[22,22,22,22,]),'term':([2,7,11,17,19,40,42,43,44,48,51,56,72,89,],[23,23,23,23,23,23,23,23,23,23,70,23,23,23,]),'eqstate':([2,7,11,17,19,40,42,43,44,48,56,72,89,],[24,24,24,24,24,24,24,24,24,24,24,24,24,]),'dvml':([2,7,11,17,19,40,42,43,44,48,51,54,56,72,89,],[27,27,27,27,27,27,27,27,27,27,27,73,27,27,27,]),'identifier_list':([36,87,100,],[59,97,101,]),'compound_statement':([53,83,91,],[71,92,99,]),'arguments':([55,],[74,]),'expression_list':([56,],[76,]),'parameter_list':([75,],[86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations optional_statements','program',2,'p_program','my_parser.py',28),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','my_parser.py',38),
  ('identifier_list -> identifier_list COMA ID','identifier_list',3,'p_identifier_list','my_parser.py',39),
  ('declarations -> declarations VAR type identifier_list COLON','declarations',5,'p_declarations','my_parser.py',48),
  ('declarations -> empty','declarations',1,'p_declarations','my_parser.py',49),
  ('type -> INT','type',1,'p_type','my_parser.py',57),
  ('type -> FLOAT','type',1,'p_type','my_parser.py',58),
  ('type -> STR','type',1,'p_type','my_parser.py',59),
  ('optional_statements -> statement_list','optional_statements',1,'p_optional_statements','my_parser.py',64),
  ('optional_statements -> empty','optional_statements',1,'p_optional_statements','my_parser.py',65),
  ('statement_list -> statement','statement_list',1,'p_statement_list','my_parser.py',71),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','my_parser.py',72),
  ('statement -> IF OPEN expression CLOSE THEN compound_statement','statement',6,'p_statement','my_parser.py',81),
  ('statement -> WHILE OPEN expression CLOSE compound_statement','statement',5,'p_statement','my_parser.py',82),
  ('statement -> subprogram_declarations','statement',1,'p_statement','my_parser.py',83),
  ('statement -> expression','statement',1,'p_statement','my_parser.py',84),
  ('statement -> out','statement',1,'p_statement','my_parser.py',85),
  ('subprogram_declarations -> subprogram_declaration','subprogram_declarations',1,'p_subprogram_declarations','my_parser.py',97),
  ('subprogram_declarations -> subprogram_declarations subprogram_declaration','subprogram_declarations',2,'p_subprogram_declarations','my_parser.py',98),
  ('subprogram_declaration -> subprogram_head declarations compound_statement','subprogram_declaration',3,'p_subprogram_declaration','my_parser.py',107),
  ('subprogram_head -> FUNK ID arguments','subprogram_head',3,'p_subprogram_head','my_parser.py',113),
  ('arguments -> OPEN parameter_list CLOSE','arguments',3,'p_arguments','my_parser.py',120),
  ('parameter_list -> type identifier_list','parameter_list',2,'p_parameter_list','my_parser.py',126),
  ('parameter_list -> parameter_list COLON type identifier_list','parameter_list',4,'p_parameter_list','my_parser.py',127),
  ('compound_statement -> OPEN_CONSTR optional_statements CLOSE_CONSTR','compound_statement',3,'p_compound_statement','my_parser.py',137),
  ('expression_list -> expression','expression_list',1,'p_expression_list','my_parser.py',169),
  ('expression_list -> expression_list COMA expression','expression_list',3,'p_expression_list','my_parser.py',170),
  ('expression -> NOT simple_expression','expression',2,'p_expression','my_parser.py',178),
  ('expression -> RETURN simple_expression','expression',2,'p_expression','my_parser.py',179),
  ('expression -> expression AND simple_expression','expression',3,'p_expression','my_parser.py',180),
  ('expression -> expression OR simple_expression','expression',3,'p_expression','my_parser.py',181),
  ('expression -> simple_expression RELOP simple_expression','expression',3,'p_expression','my_parser.py',182),
  ('expression -> simple_expression','expression',1,'p_expression','my_parser.py',183),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','my_parser.py',196),
  ('simple_expression -> eqstate','simple_expression',1,'p_simple_expression','my_parser.py',197),
  ('eqstate -> factor EQUAL term','eqstate',3,'p_eqstate','my_parser.py',206),
  ('eqstate -> factor','eqstate',1,'p_eqstate','my_parser.py',207),
  ('term -> dvml','term',1,'p_term','my_parser.py',215),
  ('term -> term PLUSMINUS dvml','term',3,'p_term','my_parser.py',216),
  ('dvml -> factor','dvml',1,'p_dvml','my_parser.py',223),
  ('dvml -> dvml DIVMUL factor','dvml',3,'p_dvml','my_parser.py',224),
  ('out -> PRINT OPEN factor CLOSE COLON','out',5,'p_out','my_parser.py',232),
  ('in -> INPUT OPEN CLOSE COLON','in',4,'p_in','my_parser.py',237),
  ('factor -> ID','factor',1,'p_factor','my_parser.py',242),
  ('factor -> ID OPEN expression_list CLOSE','factor',4,'p_factor','my_parser.py',243),
  ('factor -> NUM','factor',1,'p_factor','my_parser.py',244),
  ('factor -> CONTINUE','factor',1,'p_factor','my_parser.py',245),
  ('factor -> BREAK','factor',1,'p_factor','my_parser.py',246),
  ('factor -> FLOAT_NUM','factor',1,'p_factor','my_parser.py',247),
  ('factor -> OPEN expression CLOSE','factor',3,'p_factor','my_parser.py',248),
  ('factor -> type factor','factor',2,'p_factor','my_parser.py',249),
  ('factor -> NOT factor','factor',2,'p_factor','my_parser.py',250),
  ('factor -> MARK STRING MARK','factor',3,'p_factor','my_parser.py',251),
  ('factor -> factor COLON','factor',2,'p_factor','my_parser.py',252),
  ('empty -> <empty>','empty',0,'p_empty','my_parser.py',269),
]
